// ðŸš€ FaÃ§a as modificaÃ§Ãµes necessÃ¡rias na funÃ§Ã£o para que o seu comportamento respeite o escopo no qual cada variÃ¡vel foi declarada.
// Modifique a estrutura da funÃ§Ã£o para que ela seja uma arrow function.
// Modifique as concatenaÃ§Ãµes para template literals.
// Copie o cÃ³digo abaixo.
// function testingScope(escopo) {
//   if (escopo === true) {
//     var ifScope = 'NÃ£o devo ser utilizada fora do meu escopo (if)';
//     ifScope = ifScope + ' Ã³timo, fui utilizada no escopo !';
//     console.log(ifScope);
//   } else {
//     var elseScope = 'NÃ£o devo ser utilizada fora meu escopo (else)';
//     console.log(elseScope);
//   }
//   console.log(ifScope + ' o que estou fazendo aqui ? :O'); // Se necessÃ¡rio esta linha pode ser removida.
// }

// testingScope(true);

const testingScope = escopo => {
  if (escopo === true) { 
    let ifScope = 'NÃ£o devo ser utilizada fora do meu escopo (if)';
    ifScope = `${ifScope} Ã³timo, fui utilizada no escopo !`;
    console.log(ifScope);
  } else {
    const elseScope = 'NÃ£o devo ser utilizada fora meu escopo (else)';
    console.log(elseScope);
  }
}
testingScope(true);

// ðŸš€ Copie o cÃ³digo abaixo e faÃ§a uma funÃ§Ã£o que retorne o array oddsAndEvens em ordem crescente.
// Utilize template literals para que a chamada console.log(<seu cÃ³digo>oddsAndEvens<seu cÃ³digo>); retorne "Os nÃºmeros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".
// BÃ´nus (opcional): tente fazer o mesmo exercÃ­cio utilizando o mÃ©todoarray.sort(). Spoiler: Ã‰ possÃ­vel realizar uma funÃ§Ã£o que ordene qualquer array de nÃºmeros.
// Copie o cÃ³digo abaixo.
let oddsAndEvens = [13, 3, 4, 10, 7, 2];
oddsAndEvens.sort((a, b) => a - b);
console.log(oddsAndEvens);
// Seu cÃ³digo aqui.
const sortOddsAndEvens = () => {
  oddsAndEvens[0] = 2;
  oddsAndEvens[1] = 3;
  oddsAndEvens[2] = 4;
  oddsAndEvens[3] = 7;
  oddsAndEvens[4] = 10;
  oddsAndEvens[5] = 13;
  return oddsAndEvens;
}
const sortedArray = sortOddsAndEvens();
console.log(`Os numero ${sortedArray} se encontram ordenados de forma crescente`);

// Abaixo, vocÃª verÃ¡ algumas especificaÃ§Ãµes de algoritmos para desenvolver. Ã‰ fundamental que vocÃª utilize o que aprendeu sobre let, const, arrow functions, template literals e ternary operator.
// Crie uma funÃ§Ã£o que receba um nÃºmero e retorne seu fatorial.
// Na matemÃ¡tica, o fatorial de um nÃºmero nÃ£o negativo N, com a notaÃ§Ã£o N!, Ã© o produto de todos os inteiros menores ou iguais a N. Exemplo: 4! = 4 * 3 * 2 * 1 = 24.
// BÃ´nus (opcional): tente fazer o mesmo exercÃ­cio de forma recursiva. Spoiler: Ã‰ possÃ­vel resolver com uma linha usando ternary operator.
const fatorial = number => {
  let soma = 1;
  for (let i = 1; i <= number; i += 1) {
    soma *= i;
  }
  return soma;
}

console.log(fatorial(5));

// Crie uma funÃ§Ã£o que receba uma frase e retorne qual a maior palavra.
const longestWordConst = phrase => {
  let count = phrase.split(' ');
  let maxLength = 0;
  let receiveLongest = '';
  for (const i of count) {
    if ( i.length > maxLength) {
      receiveLongest = i;
    } 
  }
  return receiveLongest;
}
console.log(longestWordConst('AntÃ´nio foi no banheiro e nÃ£o sabemos o que aconteceu'));

// ðŸš€ Crie uma pÃ¡gina que contenha:
// Um botÃ£o ao qual serÃ¡ associado um event listener;
// Uma variÃ¡vel clickCount no arquivo JavaScript que acumule o nÃºmero de clicks no botÃ£o;
// Um campo no HTML que vÃ¡ atualizando a quantidade de clicks no botÃ£o conforme a variÃ¡vel clickCount Ã© atualizada.
let clickCount = 0;

let button = document.querySelector('button');
button.onclick = () => {
  const paragraph = document.querySelector('p');
  clickCount += 1
  paragraph.innerText = clickCount;
}

// ðŸš€ Crie um cÃ³digo JavaScript com a seguinte especificaÃ§Ã£o:
// FunÃ§Ã£o 1: Escreva uma funÃ§Ã£o que vai receber uma string como parÃ¢metro. Sua funÃ§Ã£o deverÃ¡ procurar pela letra x em uma string qualquer que vocÃª determinar e substituir pela string que vocÃª passou como parÃ¢metro. Sua funÃ§Ã£o deve retornar essa nova string.
// Exemplo:
// String determinada: "Tryber x aqui!"
// ParÃ¢metro: "Bebeto"
// Retorno: "Tryber Bebeto aqui!"
// Um array com escopo global, que Ã© o escopo do arquivo JS, nesse caso, contendo cinco strings com suas principais skills.

// FunÃ§Ã£o 2: Escreva uma funÃ§Ã£o que vai receber a string retornada da FunÃ§Ã£o 1 como parÃ¢metro. Essa funÃ§Ã£o deve concatenar as skills do array global Ã  string que foi passada para a FunÃ§Ã£o 2 via parÃ¢metro. VocÃª deve ordenar os skills em ordem alfabÃ©tica. Sua funÃ§Ã£o deve retornar essa nova string.
// Exemplo:
// "Tryber x aqui!
// Minhas cinco principais habilidades sÃ£o:
// JavaScript;
// HTML; ...
// #goTrybe".

const array = ["Android", "iOS", "Architecture", "Teach", "Run"];

function buildSkillsPhrase (paramOne) {
    const fun1 = paramInner => (
      `Tryber ${paramInner} aqui!

      Tudo bem?`
    );

    let result = `${fun1(paramOne)}

    Minhas cinco principais habilidades sÃ£o:`;

    array.forEach((skill, index) =>
    result = `${result}

    - ${skill}`);

    result = `
    ${result}

    #goTrybe
    `;

    return result;
}

console.log(buildSkillsPhrase("Vinicius"));


